---

- name: 'Install StackRox'
  hosts: 'k3s1'
  gather_facts: true
  become: false
  module_defaults:
    kubernetes.core.helm:
      kubeconfig: './k3s-kubeconfig'
    kubernetes.core.k8s:
      kubeconfig: './k3s-kubeconfig'
    kubernetes.core.k8s_info:
      kubeconfig: './k3s-kubeconfig'
    kubernetes.core.k8s_exec:
      kubeconfig: './k3s-kubeconfig'

  tasks:

    - name: 'Create the stackrox namespace'
      delegate_to: 'localhost'
      kubernetes.core.k8s:
        name: 'stackrox'
        api_version: 'v1'
        kind: 'Namespace'
        state: 'present'

    - name: 'Install StackRox Central Services via the helm chart'
      delegate_to: 'localhost'
      kubernetes.core.helm:
        chart_repo_url: https://raw.githubusercontent.com/stackrox/helm-charts/main/opensource/
        chart_ref: stackrox-central-services
        release_name: stackrox-central-services
        release_namespace: stackrox
        release_values:
          env:
            openshift: false
            istio: false
            platform: "default"
          central:
            telemetry:
              enabled: false
            persistence:
              none: true
            adminPassword:
              value: vagrant-libvirt-totally-insecure
            resources:
              requests:
                memory: 1Gi
                cpu: 1
              limits:
                memory: 4Gi
                cpu: 1
            db:
              resources:
                requests:
                  memory: 1Gi
                  cpu: 500m
                limits:
                  memory: 4Gi
                  cpu: 1
          scanner:
            autoscaling:
              disable: true
            replicas: 1
            resources:
              requests:
                memory: 500Mi
                cpu: 500m
              limits:
                memory: 2500Mi
                cpu: 2000m
      notify:
        - 'Check if the init-bundle file already exists'
        - 'Find out the name of the pod in the central deployment'
        - 'Run roxctl command to create the init-bundle'
        - 'Store stackrox-init-bundle in file on Ansible control host'

    - name: 'Wait until all pods are running (Part 1)'
      delegate_to: 'localhost'
      kubernetes.core.k8s_info:
        api_version: v1
        kind: Pod
        namespace: stackrox
      register: pod_list
      until: |
        pod_list | json_query("resources[*].status.phase") | unique | sort == ["Running"]
        or
        pod_list | json_query("resources[*].status.phase") | unique | sort == ["Running", "Succeeded"]
      retries: 24
      delay: 10

    - name: 'Flush handlers to create and store init-bundle'
      ansible.builtin.meta: flush_handlers

    - name: 'Install StackRox Secured Cluster Services via the helm chart'
      delegate_to: 'localhost'
      kubernetes.core.helm:
        chart_repo_url: https://raw.githubusercontent.com/stackrox/helm-charts/main/opensource/
        chart_ref: stackrox-secured-cluster-services
        release_name: stackrox-secured-cluster-services
        release_namespace: stackrox
        values_files:
          - "{{ playbook_dir }}/stackrox_init_bundle.yml"
        release_values:
          clusterName: k3s1
          centralEndpoint: "central.stackrox.svc:443"
          sensor:
            resources:
              requests:
                memory: 500Mi
                cpu: 500m
              limits:
                memory: 500Mi
                cpu: 500m

    - name: 'Wait until all pods are running (Part 2)'
      delegate_to: 'localhost'
      kubernetes.core.k8s_info:
        api_version: v1
        kind: Pod
        namespace: stackrox
      register: pod_list
      until: |
        pod_list | json_query("resources[*].status.phase") | unique | sort == ["Running"]
        or
        pod_list | json_query("resources[*].status.phase") | unique | sort == ["Running", "Succeeded"]
      retries: 24
      delay: 10


  handlers:

    - name: 'Check if the init-bundle file already exists'
      delegate_to: 'localhost'
      ansible.builtin.stat:
        path: "{{ playbook_dir }}/stackrox_init_bundle.yml"
      register: check_for_init_bundle_file

    - name: 'Find out the name of the pod in the central deployment'
      delegate_to: 'localhost'
      kubernetes.core.k8s_info:
        api_version: v1
        kind: Pod
        namespace: stackrox
        label_selectors:
          - app=central
      register: central_pod
      when:
        - not check_for_init_bundle_file.stat.exists

    - name: 'Run roxctl command to create the init-bundle'
      delegate_to: 'localhost'
      kubernetes.core.k8s_exec:
        namespace: stackrox
        pod: "{{ central_pod.resources[0].metadata.name }}"
        command: >
          roxctl --insecure-skip-tls-verify
          --password vagrant-libvirt-totally-insecure
          central init-bundles generate stackrox-init-bundle --output -
      register: roxctl_output
      when:
        - not check_for_init_bundle_file.stat.exists

    - name: 'Store stackrox-init-bundle in file on Ansible control host'
      delegate_to: 'localhost'
      ansible.builtin.template:
        src: 'stackrox_init_bundle.yml.j2'
        dest: "{{ playbook_dir }}/stackrox_init_bundle.yml"
        mode: 0600
      when:
        - not check_for_init_bundle_file.stat.exists
